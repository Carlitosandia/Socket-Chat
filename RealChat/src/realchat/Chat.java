/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package realchat;

/**
 *
 * @author Carlo
 */
import java.awt.TextArea;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.net.InetAddress;
import java.net.Socket; //clases necesarias para trabajar con sockets y entrada/salida de datos. 
import java.nio.charset.StandardCharsets;
import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.StringTokenizer;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;

public class Chat extends javax.swing.JFrame {

    //Declaracion de variables 
    DefaultListModel<String> modelo = new DefaultListModel<>();
    ArrayList<String> listaUsuarios = new ArrayList<>();
    HashMap<Integer, String> MiHashMap = new HashMap<>();
    /**
     * Creates new form Chat
     */
    private Cliente cliente;
    private String mensaje;
    private String message;
    private String respuesta;
    private String usuario;
    private String msgConectado;
private final Object lock = new Object();
    public Chat() { // Se inicia el chat sus componentes y metodos 
        initComponents();
        txtAreaChat.setEditable(false);
        txtAreaChat.setFocusable(false);
        run();
    }

    public void obtenerCliente(Cliente cliente) { // Se obtiene el cliente
        this.cliente = cliente;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listUsuarios = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaChat = new javax.swing.JTextArea();
        txtEntryData = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        listUsuarios.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        listUsuarios.setVerifyInputWhenFocusTarget(false);
        listUsuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listUsuariosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listUsuarios);
        listUsuarios.getAccessibleContext().setAccessibleName("listUsuarios");
        listUsuarios.getAccessibleContext().setAccessibleParent(listUsuarios);

        txtAreaChat.setColumns(20);
        txtAreaChat.setRows(5);
        jScrollPane2.setViewportView(txtAreaChat);

        txtEntryData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEntryDataActionPerformed(evt);
            }
        });
        txtEntryData.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEntryDataKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEntryDataKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtEntryData)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEntryData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void txtEntryDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEntryDataActionPerformed

    }//GEN-LAST:event_txtEntryDataActionPerformed

    private void txtEntryDataKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEntryDataKeyReleased
        // TODO add your handling code here:

    }//GEN-LAST:event_txtEntryDataKeyReleased

    private void txtEntryDataKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEntryDataKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) { // Si el evento obtiene un codigo de tecla igual a Enter
            try {
                mensaje = txtEntryData.getText(); // Obtiene texto que hay en el campo y lo guarda en una variable mensaje
                cliente.recibirComando(mensaje); // Se ejecuta el metodo recibir comando con el mensaje que se desea mandar 
                txtEntryData.setText(""); // Se vacia el campo para dejarlo vacio
            } catch (IOException ioe) {
                ioe.printStackTrace(); // Mensaje de error
            }
            evt.consume(); // Consume el evento para no ejecutarlo varia veces
        }
    }//GEN-LAST:event_txtEntryDataKeyPressed

    private void listUsuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listUsuariosMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) { // Verifica si es un doble clic
            int index = listUsuarios.locationToIndex(evt.getPoint()); // Obtiene el Ã­ndice del elemento
            if (index >= 0) {
                String usuarioSelected = modelo.getElementAt(index); // Obtiene el elemento que se encuentra en el index selccionado
                cliente.startDm(usuarioSelected); // Se ejecuta el metodo startDm de cliente
                System.out.println("Se ha clickeado:" + usuarioSelected);
            }
        }
    }//GEN-LAST:event_listUsuariosMouseClicked

    private void actualizarLista(String respuesta) {
        listUsuarios.setModel(modelo); // Se crea un modelo de la lista de usuarios
        modelo.removeAllElements(); // Remueve toda la lista para actualizarla
        StringTokenizer st = new StringTokenizer(respuesta, "^"); // Lee la respuesta que dio el servidor
        String comm = st.nextToken(); // Obtiene el comando 
        String lastUser = ""; // Se inicializa una variable para obtener el ultimo usuario
        while (st.hasMoreTokens()) { // Mientras haya mas tokens 
            String usuario = st.nextToken();// Guardamos el usuario en una variable temporal
            System.out.println(usuario);
            modelo.addElement(usuario); // Se agrega el usuario a la lista
            lastUser = usuario; // Se guarda el ultimo usuario
        }
        listaUsuarios.add(lastUser); // Se agrega el ultimo usuario a la lista
        msgConectado = lastUser + " se ha conectado\n\r"; // Se guarda un mensaje para mandarlo al chat 
        txtAreaChat.append(msgConectado); // Se agrega el mensaje al chat
        txtAreaChat.revalidate();
        txtAreaChat.repaint();
    }

    public void run() {
        Thread hiloRecepcion = new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    try {
                        // Recibe un mensaje del servidor
                        String respuesta = cliente.recibirMensaje();
                        if (respuesta.startsWith("l")) { // leera el primer elemento del mensaje para conseguir el comando, si empieza con l
                            actualizarLista(respuesta); // Se actualiza la lista de usuarios
                        } else {
                            if (respuesta.startsWith("sDm")) { // Si empieza con sDm 
                                System.out.println("Se ha iniciado el chat desde Chat");
                                StringTokenizer st = new StringTokenizer(respuesta, "^"); // Se divide en tokens la respuesta del usuario
                                String comm = st.nextToken();//Se guarda el comando
                                usuario = st.nextToken(); // Se guarda el usuario en base a los tokens
                                String usuarioSelected = st.nextToken(); // Se guarda el usuario seleccionada
                                DirectChat directchat = new DirectChat(); // Se guarda el usuario 
                                directchat.obtenerCliente(cliente);
                                directchat.obtenerUsuarios(usuario, usuarioSelected);
                                directchat.setVisible(true);
                            } else {
                                if (respuesta.startsWith("m")) {
                                    String [] tokens = respuesta.split("~");
                                    String res = tokens[1];
                                    txtAreaChat.append(res);
                                    txtAreaChat.revalidate();
                                    txtAreaChat.repaint();
                                }
                            }
                        }
                    } catch (IOException ioe) {
                        ioe.printStackTrace();
                    }
                }
            }
        });
        // Inicia el hilo
        hiloRecepcion.start();

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Chat.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Chat.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Chat.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Chat.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Chat().setVisible(true);

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listUsuarios;
    public javax.swing.JTextArea txtAreaChat;
    private javax.swing.JTextField txtEntryData;
    // End of variables declaration//GEN-END:variables
}
